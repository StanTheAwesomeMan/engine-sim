import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
}

label cycle(2 * 360 * units.deg)
public node vemsign {
    input wires;
    input timing_curve;
    input rev_limit: 7500 * units.rpm;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit,limiter_duration: 0.15  * units.sec)
            .connect_wire(wires.wire1, (0.0 / 4.0) * cycle)
            .connect_wire(wires.wire3, (1.0 / 4.0) * cycle)
            .connect_wire(wires.wire4, (2.0 / 4.0) * cycle)
            .connect_wire(wires.wire2, (3.0 / 4.0) * cycle);
}

public node i5_camshaft_builder {
    input lobe_profile;
    input intake_lobe_profile;
    input exhaust_lobe_profile;
    input lobe_separation: 110.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 0.75 * units.inch;

    output intake_cam: _intake_cam;
    output exhaust_cam: _exhaust_cam;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam(params, lobe_profile: exhaust_lobe_profile)

    label rot(2 * (360 / 4.0) * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot)
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot)

    _intake_cam
        .add_lobe(rot360 + intake_lobe_center)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot)
}

public node agila {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Opel Agila",
        starter_torque: 40000 * units.lb_ft,
        starter_speed: 400 * units.rpm,
        redline: 4000 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 6.0,
            burning_efficiency_randomness: 0.1,
            max_burning_efficiency: 10000.0)
    )

    crankshaft c0(
        throw: 0.5 * 72.6 * units.mm,
        flywheel_mass: 20 * units.lb,
        mass: 40 * units.lb,
        friction_torque: 0 * units.lb_ft,
        moment_of_inertia: 0.022986844776863666 * 12,
        position_x: 0.0,
        position_y: 0.0,
        tdc: constants.pi / 2
    )

    rod_journal rj0(angle: (0.0 / 2.0) * 360 * units.deg)
	rod_journal rj1(angle: (1.0 / 2.0) * 360 * units.deg)
	rod_journal rj2(angle: (1.0 / 2.0) * 360 * units.deg)
	rod_journal rj3(angle: (0.0 / 2.0) * 360 * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: 400 * units.g,
        blowby: 0,
        compression_height: 23 * units.mm,
        wrist_pin_position: 0 * units.mm,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 300.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: (72.6 * 2.3 - 0.5 * 72.6 - 23) * units.mm
    )

    cylinder_bank_parameters bank_params(
        bore: 500 * units.mm,
        deck_height: 72.6 * 2.45 * units.mm
    )

    intake intake(
        plenum_volume: 4 * units.L,
        plenum_cross_section_area: 80.0 * units.cm2,
        intake_flow_rate: k_carb(2000.0),
        idle_flow_rate: k_carb(0.0),
        idle_throttle_plate_position: 0.992
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(3000.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(2000.0),
        velocity_decay: 0.65, //0.5
        volume: 20.0 * units.L
    )
    
    impulse_response ir0(filename: "../../sound-library/smooth/smooth_42.wav", volume: 1.4)

    exhaust_system exhaust0(es_params, audio_volume: 0.7, impulse_response: ir0)
    exhaust_system exhaust1(es_params, audio_volume: 0.4, impulse_response: ir0)

    cylinder_bank b0(bank_params, angle: 0)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            primary_length: 0 * units.inch,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.6)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            primary_length: 2 * units.inch,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.6)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            primary_length: 4 * units.inch,
            ignition_wire: wires.wire3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.4)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            primary_length: 6 * units.inch,
            ignition_wire: wires.wire4
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)



    harmonic_cam_lobe intake_lobe(
        duration_at_50_thou: 232 * units.deg,
        gamma: 4.0,
        lift: 20.3 * units.mm,
        steps: 100
    )

    harmonic_cam_lobe exhaust_lobe(
        duration_at_50_thou: 244 * units.deg,
        gamma: 2.0,
        lift: 20.5 * units.mm,
        steps: 100
    )

    i5_camshaft_builder camshaft(
        lobe_profile: "N/A",

        intake_lobe_profile: intake_lobe,
        exhaust_lobe_profile: exhaust_lobe
    )

    b0.set_cylinder_head (
        generic_small_engine_head(
            chamber_volume: 0 * units.cc,
            intake_camshaft: camshaft.intake_cam,
            exhaust_camshaft: camshaft.exhaust_cam
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 12 * units.deg)
        .add_sample(1000 * units.rpm, 12 * units.deg)
        .add_sample(2000 * units.rpm, 17 * units.deg)
        .add_sample(3000 * units.rpm, 20 * units.deg)
        .add_sample(4000 * units.rpm, 24 * units.deg)
        .add_sample(5000 * units.rpm, 28 * units.deg)
        .add_sample(6000 * units.rpm, 30 * units.deg)
        .add_sample(7000 * units.rpm, 31 * units.deg)

    engine.add_ignition_module(
        vemsign(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 4000 * units.rpm
        )
    )
}

label car_mass(800 * units.kg)

private node impreza {
    alias output __out:
        vehicle(
            mass: car_mass,
            drag_coefficient: 0.37,
            cross_sectional_area: (63.78 * units.inch) * (66.73 * units.inch),
            diff_ratio: 4.11,
            tire_radius: 10 * units.inch,
            rolling_resistance: 0.015 * car_mass * 9.81 
        );
}

private node impreza_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 75000000 * units.lb_ft
        )
        .add_gear(3.45)  // 1st
        .add_gear(2.12)  // 2nd
        .add_gear(1.44)  // 3rd
        .add_gear(1.13)  // 4th
        .add_gear(0.95); // 5th
}

public node main {
    set_engine(agila())
    set_vehicle(impreza())
    set_transmission(impreza_transmission())
}