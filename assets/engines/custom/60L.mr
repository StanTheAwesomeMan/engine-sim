
import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(720 * units.deg)
label piston_amt(6)
label rot(360/6 * units.deg)

label e_stroke(146.1) //mm 
label e_bore(117.5) //mm
label rod_ratio(1.4)
label comp_height(30) //mm
label deck_clearance(15) //mm
label e_chamber_volume(30) //cc
label e_throw(e_stroke * units.m / 2)
label e_deck_height(deck_clearance+(e_throw+e_stroke*rod_ratio+comp_height))
label crank_y(e_deck_height * units.mm)
label crank_x(0)
label bank_angle(180 * units.deg)

public node bmw_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 15000 * units.rpm;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: 0.08 * units.sec)
            .connect_wire(wires.wire1, 0 * units.deg)
            .connect_wire(wires.wire2, 0 * units.deg);

}

private node wires {
output wire1: ignition_wire();
output wire2: ignition_wire();

}

private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}

public node m52b28_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 240 * units.deg,
            gamma: 1.0,
            lift: 10 * units.mm,
            steps: 100
        );
}

public node m52b28_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 260 * units.deg,
            gamma: 1.0,
            lift: 15 * units.mm,
            steps: 100
        );
}

public node bmw_camshaft_builder {
    input lobe_profile: m52b28_lobe_profile_int();
	input ex_lobe_profile: m52b28_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 115.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: 105.0 * units.deg;
    input advance: 200 * units.deg;
    input base_radius: 19 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)


    label rot0(0 * units.deg)
    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(0 * units.deg)
    _exhaust_cam_0
        .add_lobe(0 + 90 * units.deg)
    
    _intake_cam_1
        .add_lobe(0 * units.deg)
    _exhaust_cam_1
        .add_lobe(0 + 90 * units.deg)

}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node bmw_m52b28_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: e_chamber_volume * units.cc;
    input flip_display: false;
	
	input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 35 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 150 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 175 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 200 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 215 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 230 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 238 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 35 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 85 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 105 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 120 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 150 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 155 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 165 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 165 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 165 * flow_attenuation)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: 100.0 * units.cc,
        intake_runner_cross_section_area: 1 * 6.4087 * units.cm2,
        exhaust_runner_volume: 100.0 * units.cc,
        exhaust_runner_cross_section_area: 1 * 6.4087 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node L60 {
    alias output __out: engine;

    engine engine(
        name: "A",
        starter_torque: 50000 * units.lb_ft,
        starter_speed: 100 * units.rpm,
        simulation_frequency: 6000,
        redline: 8000 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 1.0,
            burning_efficiency_randomness: 0.0,
            max_burning_efficiency: 0.9
        ),
        throttle_gamma: 2.0
    )

    wires wires()

    crankshaft c0(
        throw: e_stroke * units.mm / 2,
        flywheel_mass: 60.0 * units.kg,
        mass: 9.0 * units.kg,
        friction_torque: 1 * units.lb_ft,
        moment_of_inertia: 1.63986844776863666 * 0.06,
        position_x: 0 - crank_x,
        position_y: 0 - crank_y,
        tdc: 120.0 * units.deg
    )
    crankshaft c1(
        throw: e_stroke * units.mm / 2,
        flywheel_mass: 60.0 * units.kg,
        mass: 9.0 * units.kg,
        friction_torque: 1 * units.lb_ft,
        moment_of_inertia: 1.63986844776863666 * 0.06,
        position_x: crank_x,
        position_y: crank_y,
        tdc: 120.0 * units.deg
    )
    rod_journal rj0(angle: 0 * units.deg)
    rod_journal rj1(angle: 180 * units.deg)
    c0
        .add_rod_journal(rj0)
    
    c1
        .add_rod_journal(rj1)

    piston_parameters piston_params(
        mass: 280 * units.g,
        //blowby: k_28inH2O(0.1),
        compression_height: (comp_height + 10.0) * units.mm,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 300.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: e_stroke * rod_ratio * units.mm
    )

    cylinder_bank_parameters bank_params0(
        bore: e_bore * units.mm,
        position_x: 0 - crank_x,
        position_y: 0 - crank_y,
        deck_height: e_deck_height * units.mm
    )

    cylinder_bank_parameters bank_params1(
        bore: e_bore * units.mm,
        position_x: crank_x,
        position_y: crank_y,
        deck_height: e_deck_height * units.mm
    )

    performer_rpm_intake intake(
        carburetor_cfm: 920.0,
        idle_flow_rate_cfm: 0.000,
        idle_throttle_plate_position: 0.9991
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(800.0),
        primary_tube_length: 160.0 * units.inch,
        primary_flow_rate: k_carb(810.0),
        velocity_decay: 1, //0.5
        volume: 50.0 * units.L
    )

    exhaust_system_parameters es_params2(
        outlet_flow_rate: k_carb(820.0),
        primary_tube_length: 600.0 * units.inch,
        primary_flow_rate: k_carb(810.0),
        velocity_decay: 1, //0.5
        volume: 50.0 * units.L
    )

    impulse_response ir0(filename: "../../sound-library/smooth/smooth_36.wav", volume: 0.01)
	impulse_response ir1(filename: "../../sound-library/smooth/smooth_36.wav", volume: 0.0096)
    exhaust_system exhaust0(es_params, audio_volume: 1.0, impulse_response: ir0)
    exhaust_system exhaust1(es_params2, audio_volume: 0.96, impulse_response: ir1)

cylinder_bank b0(bank_params0, angle: 0 * units.deg)
cylinder_bank b1(bank_params1, angle: 180 * units.deg)
   b0

        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire1
        )
   b1

        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire2
        )

    engine
        .add_cylinder_bank(b0)
        .add_crankshaft(c0)

    engine
        .add_cylinder_bank(b1)
        .add_crankshaft(c1)

    harmonic_cam_lobe lobe(
        duration_at_50_thou: 256 * units.deg,
        gamma: 1.1,
        lift: 10.2 * units.mm,
        steps: 100
    )

    bmw_camshaft_builder camshaft(
	    lobe_profile: m52b28_lobe_profile_int(),
		ex_lobe_profile: m52b28_lobe_profile_exh()
	)

    b0.set_cylinder_head (
        bmw_m52b28_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )

    b1.set_cylinder_head (
        bmw_m52b28_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(000 * units.rpm, 0 * units.deg)
        .add_sample(399 * units.rpm, 0 * units.deg)
        .add_sample(400 * units.rpm, 0 * units.deg)
        .add_sample(1000 * units.rpm, 0 * units.deg)
        .add_sample(2000 * units.rpm, 0 * units.deg)
        .add_sample(3000 * units.rpm, 0 * units.deg)
        .add_sample(4000 * units.rpm, 0 * units.deg)
        .add_sample(5000 * units.rpm, 10 * units.deg)
        .add_sample(6000 * units.rpm, 10 * units.deg)
        .add_sample(7000 * units.rpm, 20 * units.deg)
        .add_sample(8000 * units.rpm, 30 * units.deg)

    engine.add_ignition_module(
        bmw_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 8000 * units.rpm
        ))
}

private node e_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 300000000 * units.lb_ft
        )
        .add_gear(3.636)
        .add_gear(2.375)
        .add_gear(1.761)
        .add_gear(1.346)
        .add_gear(0.971)
        .add_gear(0.756)
        .add_gear(0.561)
        .add_gear(0.446)
        .add_gear(0.371)
        .add_gear(0.306);
}

public node main {
    set_engine(L60())
    set_transmission(e_transmission())
}